{"inputs": [{"name": "Textbox", "doc": "Component creates a textbox for user to enter input. Provides a string (or number is `type` is \"float\") as an argument to the wrapped function.", "type": "str", "params": [["self"], ["lines", "1"], ["placeholder", "None"], ["default", "None"], ["numeric", "False"], ["type", "\"str\""], ["label", "None"]], "params_doc": [["lines", "int", "number of line rows to provide in textarea."], ["placeholder", "str", "placeholder hint to provide behind textarea."], ["default", "str", "default text to provide in textarea."], ["numeric", "bool", "DEPRECATED. Whether the input should be parsed as a number instead of a string.        "], ["type", "str", "Type of value to be returned by component. \"str\" returns a string, \"number\" returns a float value."], ["label", "str", "component name in interface."]], "shortcuts": [["text", {}], ["textbox", {"lines": 7}], ["number", {"type": "number"}]], "demos": [["diff_texts.py", ["1.png"]], ["generate_tone.py", ["1.png"]], ["text_analysis.py", ["1.png"]]]}, {"name": "Slider", "doc": "Component creates a slider that ranges from `minimum` to `maximum`. Provides a number as an argument to the wrapped function.", "type": "float", "params": [["self"], ["minimum", "0"], ["maximum", "100"], ["step", "None"], ["default", "None"], ["label", "None"]], "params_doc": [["minimum", "float", "minimum value for slider."], ["maximum", "float", "maximum value for slider."], ["step", "float", "increment between slider values."], ["default", "float", "default value."], ["label", "str", "component name in interface."]], "shortcuts": [["slider", {}]], "demos": [["generate_tone.py", ["1.png"]], ["sentence_builder.py", ["1.png"]], ["stock_forecast.py", ["1.png"]]]}, {"name": "Checkbox", "doc": "Component creates a checkbox that can be set to `True` or `False`. Provides a boolean as an argument to the wrapped function.", "type": "bool", "params": [["self"], ["label", "None"]], "params_doc": [["label", "str", "component name in interface."]], "shortcuts": [["checkbox", {}]], "demos": [["sentence_builder.py", ["1.png"]], ["stock_forecast.py", ["1.png"]]]}, {"name": "CheckboxGroup", "doc": "Component creates a set of checkboxes of which a subset can be selected. Provides a list of strings representing the selected choices as an argument to the wrapped function.", "type": "Union[List[str], List[int]]", "params": [["self"], ["choices"], ["type", "\"value\""], ["label", "None"]], "params_doc": [["choices", "List[str]", "list of options to select from."], ["type", "str", "Type of value to be returned by component. \"value\" returns the list of strings of the choices selected, \"index\" returns the list of indicies of the choices selected."], ["label", "str", "component name in interface."]], "shortcuts": [], "demos": [["sentence_builder.py", ["1.png"]], ["stock_forecast.py", ["1.png"]]]}, {"name": "Radio", "doc": "Component creates a set of radio buttons of which only one can be selected. Provides string representing selected choice as an argument to the wrapped function.", "type": "Union[str, int]", "params": [["self"], ["choices"], ["type", "\"value\""], ["label", "None"]], "params_doc": [["choices", "List[str]", "list of options to select from."], ["type", "str", "Type of value to be returned by component. \"value\" returns the string of the choice selected, \"index\" returns the index of the choice selected."], ["label", "str", "component name in interface."]], "shortcuts": [], "demos": [["sentence_builder.py", ["1.png"]], ["stock_forecast.py", ["1.png"]]]}, {"name": "Dropdown", "doc": "Component creates a dropdown of which only one can be selected. Provides string representing selected choice as an argument to the wrapped function.", "type": "Union[str, int]", "params": [["self"], ["choices"], ["type", "\"value\""], ["label", "None"]], "params_doc": [["choices", "List[str]", "list of options to select from."], ["type", "str", "Type of value to be returned by component. \"value\" returns the string of the choice selected, \"index\" returns the index of the choice selected."], ["label", "str", "component name in interface."]], "shortcuts": [], "demos": [["filter_records.py", ["1.png"]], ["generate_tone.py", ["1.png"]], ["sentence_builder.py", ["1.png"]], ["stock_forecast.py", ["1.png"]]]}, {"name": "Image", "doc": "Component creates an image upload box with editing capabilities. ", "type": "Union[numpy.array, PIL.Image, str]", "params": [["self"], ["shape", "None"], ["image_mode", "\"RGB\""], ["invert_colors", "False"], ["source", "\"upload\""], ["tool", "\"editor\""], ["type", "\"numpy\""], ["label", "None"]], "params_doc": [["shape", "Tuple[int, int]", "shape to crop and resize image to; if None, matches input image size."], ["image_mode", "str", "\"RGB\" if color, or \"L\" if black and white."], ["invert_colors", "bool", "whether to invert the image as a preprocessing step."], ["source", "str", "Source of image. \"upload\" creates a box where user can drop an image file, \"webcam\" allows user to take snapshot from their webcam, \"canvas\" defaults to a white image that can be edited and drawn upon with tools."], ["tool", "str", "Tools used for editing. \"editor\" allows a full screen editor, \"select\" provides a cropping and zoom tool."], ["type", "str", "Type of value to be returned by component. \"numpy\" returns a numpy array with shape (width, height, 3), \"pil\" returns a PIL image object, \"file\" returns a temporary file object whose path can be retrieved by file_obj.name."], ["label", "str", "component name in interface."]], "shortcuts": [["image", {}], ["webcam", {"source": "webcam"}], ["sketchpad", {"image_mode": "L", "source": "canvas", "shape": [28, 28], "invert_colors": true}]], "demos": [["digit_classifier.py", ["1.png"]], ["image_mod.py", ["1.png"]], ["webcam.py", ["1.png"]]]}, {"name": "Audio", "doc": "Component accepts audio input files. ", "type": "Union[Tuple[int, numpy.array], str, numpy.array]", "params": [["self"], ["source", "\"upload\""], ["type", "\"numpy\""], ["label", "None"]], "params_doc": [["source", "str", "Source of audio. \"upload\" creates a box where user can drop an audio file, \"microphone\" creates a microphone input."], ["type", "str", "Type of value to be returned by component. \"numpy\" returns a 2-set tuple with an integer sample_rate and the data numpy.array of shape (samples, 2), \"file\" returns a temporary file object whose path can be retrieved by file_obj.name, \"mfcc\" returns the mfcc coefficients of the input audio."], ["label", "str", "component name in interface."]], "shortcuts": [["audio", {}], ["microphone", {"source": "microphone"}]], "demos": [["reverse_audio.py", ["1.png"]], ["spectogram.py", ["1.png"]]]}, {"name": "File", "doc": "Component accepts generic file uploads.", "type": "Union[str, bytes]", "params": [["self"], ["type", "\"file\""], ["label", "None"]], "params_doc": [["type", "str", "Type of value to be returned by component. \"file\" returns a temporary file object whose path can be retrieved by file_obj.name, \"binary\" returns an bytes object."], ["label", "str", "component name in interface."]], "shortcuts": [["file", {}]], "demos": [["zip_to_json.py", ["1.png"]], ["zip_two_files.py", ["1.png"]]]}, {"name": "Dataframe", "doc": "Component accepts 2D input through a spreadsheet interface.", "type": "Union[pandas.DataFrame, numpy.array, List[Union[str, float]], List[List[Union[str, float]]]]", "params": [["self"], ["headers", "None"], ["row_count", "3"], ["col_count", "3"], ["datatype", "\"str\""], ["type", "\"pandas\""], ["label", "None"]], "params_doc": [["headers", "List[str]", "Header names to dataframe."], ["row_count", "int", "Limit number of rows for input."], ["col_count", "int", "Limit number of columns for input. If equal to 1, return data will be one-dimensional. Ignored if `headers` is provided."], ["datatype", "Union[str, List[str]]", "Datatype of values in sheet. Can be provided per column as a list of strings, or for the entire sheet as a single string. Valid datatypes are \"str\", \"number\", \"bool\", and \"date\"."], ["type", "str", "Type of value to be returned by component. \"pandas\" for pandas dataframe, \"numpy\" for numpy array, or \"array\" for a Python array."], ["label", "str", "component name in interface."]], "shortcuts": [["dataframe", {"type": "pandas"}], ["numpy", {"type": "numpy"}], ["matrix", {"type": "array"}], ["list", {"type": "array", "col_count": 1}]], "demos": [["filter_records.py", ["1.png"]], ["matrix_transpose.py", ["1.png"]]]}], "outputs": [{"name": "Textbox", "doc": "Component creates a textbox to render output text or number.", "type": "Union[str, float, int]", "params": [["self"], ["type", "\"str\""], ["label", "None"]], "params_doc": [["type", "str", "Type of value to be passed to component. \"str\" expects a string, \"number\" expects a float value."], ["label", "str", "component name in interface."]], "shortcuts": [["text", {"type": "str"}], ["textbox", {"type": "str"}], ["number", {"type": "number"}]], "demos": [["sentence_builder.py", ["1.png"]]]}, {"name": "Label", "doc": "Component outputs a classification label, along with confidence scores of top categories if provided. Confidence scores are represented as a dictionary mapping labels to scores between 0 and 1.", "type": "Union[Dict[str, float], str, int, float]", "params": [["self"], ["num_top_classes", "None"], ["label", "None"]], "params_doc": [["num_top_classes", "int", "number of most confident classes to show."], ["label", "str", "component name in interface."]], "shortcuts": [["label", {}]], "demos": [["digit_classifier.py", ["1.png"]]]}, {"name": "Image", "doc": "Component displays an output image. ", "type": "Union[numpy.array, PIL.Image, str, matplotlib.pyplot]", "params": [["self"], ["type", "\"numpy\""], ["plot", "False"], ["label", "None"]], "params_doc": [["type", "str", "Type of value to be passed to component. \"numpy\" expects a numpy array with shape (width, height, 3), \"pil\" expects a PIL image object, \"file\" expects a file path to the saved image, \"plot\" expects a matplotlib.pyplot object."], ["plot", "bool", "DEPRECATED. Whether to expect a plot to be returned by the function."], ["label", "str", "component name in interface."]], "shortcuts": [["image", {}], ["plot", {"type": "plot"}], ["pil", {"type": "pil"}]], "demos": [["image_mod.py", ["1.png"]], ["spectogram.py", ["1.png"]], ["stock_forecast.py", ["1.png"]], ["webcam.py", ["1.png"]]]}, {"name": "KeyValues", "doc": "Component displays a table representing values for multiple fields. ", "type": "Union[Dict, List[Tuple[str, Union[str, int, float]]]]", "params": [["self"], ["label", "None"]], "params_doc": [["label", "str", "component name in interface."]], "shortcuts": [["key_values", {}]], "demos": [["text_analysis.py", ["1.png"]]]}, {"name": "HighlightedText", "doc": "Component creates text that contains spans that are highlighted by category or numerical value.\nOutput is represent as a list of Tuple pairs, where the first element represents the span of text represented by the tuple, and the second element represents the category or value of the text.", "type": "List[Tuple[str, Union[float, str]]]", "params": [["self"], ["color_map", "None"], ["label", "None"]], "params_doc": [["color_map", "Dict[str, str]", "Map between category and respective colors"], ["label", "str", "component name in interface."]], "shortcuts": [["highlight", {}]], "demos": [["diff_texts.py", ["1.png"]], ["text_analysis.py", ["1.png"]]]}, {"name": "Audio", "doc": "Creates an audio player that plays the output audio.", "type": "Union[Tuple[int, numpy.array], str]", "params": [["self"], ["type", "\"numpy\""], ["label", "None"]], "params_doc": [["type", "str", "Type of value to be passed to component. \"numpy\" returns a 2-set tuple with an integer sample_rate and the data numpy.array of shape (samples, 2), \"file\" returns a temporary file path to the saved wav audio file."], ["label", "str", "component name in interface."]], "shortcuts": [["audio", {}]], "demos": [["generate_tone.py", ["1.png"]], ["reverse_audio.py", ["1.png"]]]}, {"name": "JSON", "doc": "Used for JSON output. Expects a JSON string or a Python object that is JSON serializable. ", "type": "Union[str, Any]", "params": [["self"], ["label", "None"]], "params_doc": [["label", "str", "component name in interface."]], "shortcuts": [["json", {}]], "demos": [["zip_to_json.py", ["1.png"]]]}, {"name": "HTML", "doc": "Used for HTML output. Expects an HTML valid string. ", "type": "str", "params": [["self"], ["label", "None"]], "params_doc": [["label", "str", "component name in interface."]], "shortcuts": [["html", {}]], "demos": [["text_analysis.py", ["1.png"]]]}, {"name": "File", "doc": "Used for file output.     ", "type": "Union[file-like, str]", "params": [["self"], ["label", "None"]], "params_doc": [["label", "str", "component name in interface."]], "shortcuts": [["file", {}]], "demos": [["zip_two_files.py", ["1.png"]]]}, {"name": "Dataframe", "doc": "Component displays 2D output through a spreadsheet interface.", "type": "Union[pandas.DataFrame, numpy.array, List[Union[str, float]], List[List[Union[str, float]]]]", "params": [["self"], ["headers", "None"], ["type", "\"pandas\""], ["label", "None"]], "params_doc": [["headers", "List[str]", "Header names to dataframe."], ["type", "str", "Type of value to be passed to component. \"pandas\" for pandas dataframe, \"numpy\" for numpy array, or \"array\" for Python array."], ["label", "str", "component name in interface."]], "shortcuts": [["dataframe", {"type": "pandas"}], ["numpy", {"type": "numpy"}], ["matrix", {"type": "array"}], ["list", {"type": "array"}]], "demos": [["filter_records.py", ["1.png"]], ["matrix_transpose.py", ["1.png"]]]}], "interface": {"doc": "Interfaces are created with Gradio using the `gradio.Interface()` function.", "params": [["self"], ["fn"], ["inputs"], ["outputs"], ["verbose", "False"], ["examples", "None"], ["live", "False"], ["capture_session", "False"], ["title", "None"], ["description", "None"], ["thumbnail", "None"], ["allow_screenshot", "True"], ["allow_flagging", "True"], ["flagging_dir", "\"flagged\""]], "params_doc": [["fn", "Callable", "the function to wrap an interface around."], ["inputs", "Union[str, List[Union[str, InputComponent]]]", "a single Gradio input component, or list of Gradio input components. Components can either be passed as instantiated objects, or referred to by their string shortcuts. The number of input components should match the number of parameters in fn."], ["outputs", "Union[str, List[Union[str, OutputComponent]]]", "a single Gradio output component, or list of Gradio output components. Components can either be passed as instantiated objects, or referred to by their string shortcuts. The number of output components should match the number of values returned by fn."], ["verbose", "bool", "whether to print detailed information during launch."], ["examples", "List[List[Any]]", "sample inputs for the function; if provided, appears below the UI components and can be used to populate the interface. Should be nested list, in which the outer list consists of samples and each inner list consists of an input corresponding to each input component."], ["live", "bool", "whether the interface should automatically reload on change."], ["capture_session", "bool", "if True, captures the default graph and session (needed for Tensorflow 1.x)"], ["title", "str", "a title for the interface; if provided, appears above the input and output components."], ["description", "str", "a description for the interface; if provided, appears above the input and output components."], ["thumbnail", "str", "path to image or src to use as display picture for models listed in gradio.app/hub"], ["allow_screenshot", "bool", "if False, users will not see a button to take a screenshot of the interface."], ["allow_flagging", "bool", "if False, users will not see a button to flag an input and output."], ["flagging_dir", "str", "what to name the dir where flagged data is stored."]]}, "launch": {"params": [["self"], ["inline", "None"], ["inbrowser", "None"], ["share", "False"], ["debug", "False"]], "params_doc": [["inline", "bool", "whether to display in the interface inline on python notebooks."], ["inbrowser", "bool", "whether to automatically launch the interface in a new tab on the default browser."], ["share", "bool", "whether to create a publicly shareable link from your computer for the interface."], ["debug", "bool", "if True, and the interface was launched from Google Colab, prints the errors in the cell output."]]}}