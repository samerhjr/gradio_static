{"inputs": [{"name": "Textbox", "doc": "Component creates a textbox for user to enter input. Provides a string (or number is `is_numeric` is true) as an argument to the wrapped function.", "type": "str", "params": [["self"], ["lines", "1"], ["placeholder", "None"], ["default", "None"], ["numeric", "False"], ["label", "None"]], "params_doc": [["lines", "int", "number of line rows to provide in textarea."], ["placeholder", "str", "placeholder hint to provide behind textarea."], ["default", "str", "default text to provide in textarea."], ["numeric", "bool", "whether the input should be parsed as a number instead of a string."], ["label", "str", "component name in interface."]], "shortcuts": [["text", {}], ["textbox", {"lines": 7}], ["number", {"numeric": true}]]}, {"name": "Slider", "doc": "Component creates a slider that ranges from `minimum` to `maximum`. Provides a number as an argument to the wrapped function.", "type": "float", "params": [["self"], ["minimum", "0"], ["maximum", "100"], ["step", "None"], ["default", "None"], ["label", "None"]], "params_doc": [["minimum", "float", "minimum value for slider."], ["maximum", "float", "maximum value for slider."], ["step", "float", "increment between slider values."], ["default", "float", "default value."], ["label", "str", "component name in interface."]], "shortcuts": [["slider", {}]]}, {"name": "Checkbox", "doc": "Component creates a checkbox that can be set to `True` or `False`. Provides a boolean as an argument to the wrapped function.", "type": "bool", "params": [["self"], ["label", "None"]], "params_doc": [["label", "str", "component name in interface."]], "shortcuts": [["checkbox", {}]]}, {"name": "CheckboxGroup", "doc": "Component creates a set of checkboxes of which a subset can be selected. Provides a list of strings representing the selected choices as an argument to the wrapped function.", "type": "List[str]", "params": [["self"], ["choices"], ["label", "None"]], "params_doc": [["choices", "List[str]", "list of options to select from."], ["label", "str", "component name in interface."]], "shortcuts": []}, {"name": "Radio", "doc": "Component creates a set of radio buttons of which only one can be selected. Provides string representing selected choice as an argument to the wrapped function.", "type": "str", "params": [["self"], ["choices"], ["label", "None"]], "params_doc": [["choices", "List[str]", "list of options to select from."], ["label", "str", "component name in interface."]], "shortcuts": []}, {"name": "Dropdown", "doc": "Component creates a dropdown of which only one can be selected. Provides string representing selected choice as an argument to the wrapped function.", "type": "str", "params": [["self"], ["choices"], ["label", "None"]], "params_doc": [["choices", "List[str]", "list of options to select from."], ["label", "str", "component name in interface."]], "shortcuts": []}, {"name": "Image", "doc": "Component creates an image upload box with editing capabilities. Provides numpy array of shape `(width, height, 3)` if `image_mode` is \"RGB\" as an argument to the wrapped function. Provides numpy array of shape `(width, height)` if `image_mode` is \"L\" as an argument to the wrapped function.", "type": "numpy.array", "params": [["self"], ["shape", "(224, 224)"], ["image_mode", "\"RGB\""], ["label", "None"]], "params_doc": [["shape", "Tuple[int, int]", "shape to crop and resize image to."], ["image_mode", "str", "\"RGB\" if color, or \"L\" if black and white."], ["label", "str", "component name in interface."]], "shortcuts": [["image", {}]]}, {"name": "Sketchpad", "doc": "Component creates a sketchpad for black and white illustration. Provides numpy array of shape `(width, height)` as an argument to the wrapped function.", "type": "numpy.array", "params": [["self"], ["shape", "(28, 28)"], ["invert_colors", "True"], ["flatten", "False"], ["label", "None"]], "params_doc": [["shape", "Tuple[int, int]", "shape to crop and resize image to."], ["invert_colors", "bool", "whether to represent black as 1 and white as 0 in the numpy array."], ["flatten", "bool", "whether to reshape the numpy array to a single dimension."], ["label", "str", "component name in interface."]], "shortcuts": [["sketchpad", {}]]}, {"name": "Webcam", "doc": "Component creates a webcam for captured image input. Provides numpy array of shape `(width, height, 3)` as an argument to the wrapped function.", "type": "numpy.array", "params": [["self"], ["shape", "(224, 224)"], ["label", "None"]], "params_doc": [["shape", "Tuple[int, int]", "shape to crop and resize image to."], ["label", "str", "component name in interface."]], "shortcuts": [["webcam", {}]]}, {"name": "Microphone", "doc": "Component creates a microphone element for audio inputs. Provides numpy array of shape `(samples, 2)` as an argument to the wrapped function.", "type": "numpy.array", "params": [["self"], ["preprocessing", "None"], ["label", "None"]], "params_doc": [["preprocessing", "Union[str, Callable]", "preprocessing to apply to input"], ["label", "str", "component name in interface."]], "shortcuts": [["microphone", {}]]}], "outputs": [{"name": "Textbox", "doc": "Component creates a textbox to render output text or number.", "type": "str", "params": [["self"], ["label", "None"]], "params_doc": [["label", "str", "component name in interface."]], "shortcuts": [["text", {}], ["textbox", {}], ["number", {}]]}, {"name": "Label", "doc": "Component outputs a classification label, along with confidence scores of top categories if provided. Confidence scores are represented as a dictionary mapping labels to scores between 0 and 1.", "type": "Union[Dict[str, float], str, int, float]", "params": [["self"], ["num_top_classes", "None"], ["label", "None"]], "params_doc": [["num_top_classes", "int", "number of most confident classes to show."], ["label", "str", "component name in interface."]], "shortcuts": [["label", {}]]}, {"name": "Image", "doc": "Component displays an image. Expects a numpy array of shape `(width, height, 3)` to be returned by the function, or a `matplotlib.pyplot` if `plot = True`.", "type": "numpy.array", "params": [["self"], ["plot", "False"], ["label", "None"]], "params_doc": [["plot", "bool", "whether to expect a plot to be returned by the function."], ["label", "str", "component name in interface."]], "shortcuts": [["image", {}], ["plot", {"plot": true}]]}, {"name": "KeyValues", "doc": "Component displays a table representing values for multiple fields. ", "type": "List[Tuple[str, value]]", "params": [["self"], ["label", "None"]], "params_doc": [["label", "str", "component name in interface."]], "shortcuts": [["key_values", {}]]}], "interface": {"doc": "Interfaces are created with Gradio using the `gradio.Interface()` function.", "params": [["self"], ["fn"], ["inputs"], ["outputs"], ["examples", "None"], ["live", "False"], ["capture_session", "False"], ["title", "None"], ["description", "None"]], "params_doc": [["fn", "Callable", "the function to wrap an interface around."], ["inputs", "Union[str, List[Union[str, AbstractInput]]]", "a single Gradio input component, or list of Gradio input components. Components can either be passed as instantiated objects, or referred to by their string shortcuts. The number of input components should match the number of parameters in fn."], ["outputs", "Union[str, List[Union[str, AbstractOutput]]]", "a single Gradio output component, or list of Gradio output components. Components can either be passed as instantiated objects, or referred to by their string shortcuts. The number of output components should match the number of values returned by fn."], ["live", "bool", "whether the interface should automatically reload on change."], ["capture_session", "bool", "if True, captures the default graph and session (needed for Tensorflow 1.x)"], ["title", "str", "a title for the interface; if provided, appears above the input and output components."], ["description", "str", "a description for the interface; if provided, appears above the input and output components."], ["examples", "List[List[Any]]", "sample inputs for the function; if provided, appears below the UI components and can be used to populate the interface. Should be nested list, in which the outer list consists of samples and each inner list consists of an input corresponding to each input component."]]}, "launch": {"params": [["self"], ["share", "False"]], "params_doc": [["share", "bool", "whether to create a publicly shareable link from your computer for the interface."]]}}